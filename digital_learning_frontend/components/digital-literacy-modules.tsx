"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import {
  Monitor,
  Mouse,
  Keyboard,
  Wifi,
  Mail,
  Search,
  ImageIcon,
  Play,
  CheckCircle,
  Star,
  Trophy,
  Clock,
  ArrowRight,
  ArrowLeft,
  RotateCcw,
  Lightbulb,
  Target,
  Award,
} from "lucide-react"

interface MicroLesson {
  id: string
  title: string
  titleHi: string
  titlePa: string
  description: string
  descriptionHi: string
  descriptionPa: string
  icon: React.ReactNode
  duration: number
  difficulty: "beginner" | "intermediate" | "advanced"
  steps: Step[]
  completed: boolean
  score?: number
  badge?: string
}

interface Step {
  id: string
  title: string
  titleHi: string
  titlePa: string
  content: string
  contentHi: string
  contentPa: string
  type: "instruction" | "practice" | "quiz" | "demonstration"
  media?: string
  interactive?: boolean
  completed: boolean
}

const mockMicroLessons: MicroLesson[] = [
  {
    id: "1",
    title: "Using a Computer Mouse",
    titleHi: "‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§Æ‡§æ‡§â‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó",
    titlePa: "‡®ï‡©∞‡®™‡®ø‡®ä‡®ü‡®∞ ‡®Æ‡®æ‡®ä‡®∏ ‡®¶‡©Ä ‡®µ‡®∞‡®§‡©ã‡®Ç",
    description: "Learn how to use a computer mouse effectively",
    descriptionHi: "‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§Æ‡§æ‡§â‡§∏ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§∏‡•Ä‡§ñ‡•á‡§Ç",
    descriptionPa: "‡®ï‡©∞‡®™‡®ø‡®ä‡®ü‡®∞ ‡®Æ‡®æ‡®ä‡®∏ ‡®¶‡©Ä ‡®™‡©ç‡®∞‡®≠‡®æ‡®µ‡®∏‡®º‡®æ‡®≤‡©Ä ‡®µ‡®∞‡®§‡©ã‡®Ç ‡®∏‡®ø‡©±‡®ñ‡©ã",
    icon: <Mouse className="w-6 h-6" />,
    duration: 5,
    difficulty: "beginner",
    completed: true,
    score: 95,
    badge: "Mouse Master",
    steps: [
      {
        id: "1-1",
        title: "Hold the Mouse",
        titleHi: "‡§Æ‡§æ‡§â‡§∏ ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡•á‡§Ç",
        titlePa: "‡®Æ‡®æ‡®ä‡®∏ ‡®®‡©Ç‡©∞ ‡®´‡©ú‡©ã",
        content: "Place your hand gently on the mouse with your index finger on the left button",
        contentHi: "‡§Ö‡§™‡§®‡§æ ‡§π‡§æ‡§• ‡§Æ‡§æ‡§â‡§∏ ‡§™‡§∞ ‡§ß‡•Ä‡§∞‡•á ‡§∏‡•á ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§§‡§∞‡•ç‡§ú‡§®‡•Ä ‡§ï‡•ã ‡§¨‡§æ‡§è‡§Ç ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§∞‡§ñ‡•á‡§Ç",
        contentPa: "‡®Ü‡®™‡®£‡®æ ‡®π‡©±‡®• ‡®Æ‡®æ‡®ä‡®∏ ‡®â‡©±‡®§‡©á ‡®π‡©å‡®≤‡©Ä ‡®®‡®æ‡®≤ ‡®∞‡©±‡®ñ‡©ã ‡®Ö‡®§‡©á ‡®§‡®∞‡®ú‡®®‡©Ä ‡®®‡©Ç‡©∞ ‡®ñ‡©±‡®¨‡©á ‡®¨‡®ü‡®® ‡®â‡©±‡®§‡©á ‡®∞‡©±‡®ñ‡©ã",
        type: "instruction",
        media: "/mouse-hold-demo.gif",
        completed: true,
      },
      {
        id: "1-2",
        title: "Move the Cursor",
        titleHi: "‡§ï‡§∞‡•ç‡§∏‡§∞ ‡§ï‡•ã ‡§π‡§ø‡§≤‡§æ‡§è‡§Ç",
        titlePa: "‡®ï‡®∞‡®∏‡®∞ ‡®®‡©Ç‡©∞ ‡®π‡®ø‡®≤‡®æ‡®ì",
        content: "Gently move the mouse to control the cursor on screen",
        contentHi: "‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§™‡§∞ ‡§ï‡§∞‡•ç‡§∏‡§∞ ‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§æ‡§â‡§∏ ‡§ï‡•ã ‡§ß‡•Ä‡§∞‡•á ‡§∏‡•á ‡§π‡§ø‡§≤‡§æ‡§è‡§Ç",
        contentPa: "‡®∏‡®ï‡©ç‡®∞‡©Ä‡®® ‡®â‡©±‡®§‡©á ‡®ï‡®∞‡®∏‡®∞ ‡®®‡©Ç‡©∞ ‡®ï‡©∞‡®ü‡®∞‡©ã‡®≤ ‡®ï‡®∞‡®® ‡®≤‡®à ‡®Æ‡®æ‡®ä‡®∏ ‡®®‡©Ç‡©∞ ‡®π‡©å‡®≤‡©Ä ‡®®‡®æ‡®≤ ‡®π‡®ø‡®≤‡®æ‡®ì",
        type: "practice",
        interactive: true,
        completed: true,
      },
      {
        id: "1-3",
        title: "Click Practice",
        titleHi: "‡§ï‡•ç‡§≤‡§ø‡§ï ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏",
        titlePa: "‡®ï‡®≤‡®ø‡©±‡®ï ‡®Ö‡®≠‡®ø‡®Ü‡®∏",
        content: "Practice clicking on different targets to improve accuracy",
        contentHi: "‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
        contentPa: "‡®∏‡®ü‡©Ä‡®ï‡®§‡®æ ‡®µ‡®ø‡©±‡®ö ‡®∏‡©Å‡®ß‡®æ‡®∞ ‡®≤‡®à ‡®µ‡©±‡®ñ-‡®µ‡©±‡®ñ ‡®ü‡®æ‡®∞‡®ó‡©á‡®ü‡®æ‡®Ç ‡®â‡©±‡®§‡©á ‡®ï‡®≤‡®ø‡©±‡®ï ‡®ï‡®∞‡®® ‡®¶‡®æ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®ï‡®∞‡©ã",
        type: "practice",
        interactive: true,
        completed: true,
      },
    ],
  },
  {
    id: "2",
    title: "Keyboard Basics",
    titleHi: "‡§ï‡•Ä‡§¨‡•ã‡§∞‡•ç‡§° ‡§ï‡•Ä ‡§Æ‡•Ç‡§≤ ‡§¨‡§æ‡§§‡•á‡§Ç",
    titlePa: "‡®ï‡©Ä‡®¨‡©ã‡®∞‡®° ‡®¶‡©Ä‡®Ü‡®Ç ‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®ó‡©±‡®≤‡®æ‡®Ç",
    description: "Learn to type and use keyboard shortcuts",
    descriptionHi: "‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§®‡§æ ‡§î‡§∞ ‡§ï‡•Ä‡§¨‡•ã‡§∞‡•ç‡§° ‡§∂‡•â‡§∞‡•ç‡§ü‡§ï‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§∏‡•Ä‡§ñ‡•á‡§Ç",
    descriptionPa: "‡®ü‡®æ‡®à‡®™ ‡®ï‡®∞‡®®‡®æ ‡®Ö‡®§‡©á ‡®ï‡©Ä‡®¨‡©ã‡®∞‡®° ‡®∏‡®º‡®æ‡®∞‡®ü‡®ï‡©±‡®ü ‡®¶‡©Ä ‡®µ‡®∞‡®§‡©ã‡®Ç ‡®∏‡®ø‡©±‡®ñ‡©ã",
    icon: <Keyboard className="w-6 h-6" />,
    duration: 8,
    difficulty: "beginner",
    completed: false,
    steps: [
      {
        id: "2-1",
        title: "Home Row Position",
        titleHi: "‡§π‡•ã‡§Æ ‡§∞‡•ã ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        titlePa: "‡®π‡©ã‡®Æ ‡®∞‡©ã ‡®∏‡®•‡®ø‡®§‡©Ä",
        content: "Place your fingers on the home row keys: ASDF for left hand, JKL; for right hand",
        contentHi: "‡§Ö‡§™‡§®‡•Ä ‡§â‡§Ç‡§ó‡§≤‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§π‡•ã‡§Æ ‡§∞‡•ã ‡§ï‡•Ä‡§ú‡§º ‡§™‡§∞ ‡§∞‡§ñ‡•á‡§Ç: ‡§¨‡§æ‡§è‡§Ç ‡§π‡§æ‡§• ‡§ï‡•á ‡§≤‡§ø‡§è ASDF, ‡§¶‡§æ‡§è‡§Ç ‡§π‡§æ‡§• ‡§ï‡•á ‡§≤‡§ø‡§è JKL;",
        contentPa: "‡®Ü‡®™‡®£‡©Ä‡®Ü‡®Ç ‡®â‡®Ç‡®ó‡®≤‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®π‡©ã‡®Æ ‡®∞‡©ã ‡®ï‡©Ä‡®ú‡®º ‡®â‡©±‡®§‡©á ‡®∞‡©±‡®ñ‡©ã: ‡®ñ‡©±‡®¨‡©á ‡®π‡©±‡®• ‡®≤‡®à ASDF, ‡®∏‡©±‡®ú‡©á ‡®π‡©±‡®• ‡®≤‡®à JKL;",
        type: "instruction",
        completed: false,
      },
      {
        id: "2-2",
        title: "Basic Typing",
        titleHi: "‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§ü‡§æ‡§á‡§™‡§ø‡§Ç‡§ó",
        titlePa: "‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®ü‡®æ‡®à‡®™‡®ø‡©∞‡®ó",
        content: "Practice typing simple words and sentences",
        contentHi: "‡§∏‡§∞‡§≤ ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§î‡§∞ ‡§µ‡§æ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
        contentPa: "‡®∏‡®ß‡®æ‡®∞‡®® ‡®∏‡®º‡®¨‡®¶‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®µ‡®æ‡®ï‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®ü‡®æ‡®à‡®™ ‡®ï‡®∞‡®® ‡®¶‡®æ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®ï‡®∞‡©ã",
        type: "practice",
        interactive: true,
        completed: false,
      },
    ],
  },
  {
    id: "3",
    title: "Internet Browsing",
    titleHi: "‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§ø‡§Ç‡§ó",
    titlePa: "‡®á‡©∞‡®ü‡®∞‡®®‡©à‡©±‡®ü ‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º‡®ø‡©∞‡®ó",
    description: "Navigate the web safely and effectively",
    descriptionHi: "‡§µ‡•á‡§¨ ‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    descriptionPa: "‡®µ‡©à‡©±‡®¨ ‡®®‡©Ç‡©∞ ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ö‡®§ ‡®Ö‡®§‡©á ‡®™‡©ç‡®∞‡®≠‡®æ‡®µ‡®∏‡®º‡®æ‡®≤‡©Ä ‡®§‡®∞‡©Ä‡®ï‡©á ‡®®‡®æ‡®≤ ‡®®‡©à‡®µ‡©Ä‡®ó‡©á‡®ü ‡®ï‡®∞‡©ã",
    icon: <Wifi className="w-6 h-6" />,
    duration: 12,
    difficulty: "intermediate",
    completed: false,
    steps: [
      {
        id: "3-1",
        title: "Opening a Browser",
        titleHi: "‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§ñ‡•ã‡§≤‡§®‡§æ",
        titlePa: "‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º‡®∞ ‡®ñ‡©ã‡®≤‡®º‡®£‡®æ",
        content: "Learn how to open and navigate a web browser",
        contentHi: "‡§µ‡•á‡§¨ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ñ‡•ã‡§≤‡§®‡§æ ‡§î‡§∞ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§∏‡•Ä‡§ñ‡•á‡§Ç",
        contentPa: "‡®µ‡©à‡©±‡®¨ ‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º‡®∞ ‡®®‡©Ç‡©∞ ‡®ñ‡©ã‡®≤‡®º‡®£‡®æ ‡®Ö‡®§‡©á ‡®®‡©à‡®µ‡©Ä‡®ó‡©á‡®ü ‡®ï‡®∞‡®®‡®æ ‡®∏‡®ø‡©±‡®ñ‡©ã",
        type: "demonstration",
        completed: false,
      },
    ],
  },
  {
    id: "4",
    title: "Email Basics",
    titleHi: "‡§à‡§Æ‡•á‡§≤ ‡§ï‡•Ä ‡§Æ‡•Ç‡§≤ ‡§¨‡§æ‡§§‡•á‡§Ç",
    titlePa: "‡®à‡®Æ‡©á‡®≤ ‡®¶‡©Ä‡®Ü‡®Ç ‡®¨‡©Å‡®®‡®ø‡®Ü‡®¶‡©Ä ‡®ó‡©±‡®≤‡®æ‡®Ç",
    description: "Send and receive emails safely",
    descriptionHi: "‡§à‡§Æ‡•á‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
    descriptionPa: "‡®à‡®Æ‡©á‡®≤ ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ö‡®§ ‡®§‡®∞‡©Ä‡®ï‡©á ‡®®‡®æ‡®≤ ‡®≠‡©á‡®ú‡©ã ‡®Ö‡®§‡©á ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡©ã",
    icon: <Mail className="w-6 h-6" />,
    duration: 10,
    difficulty: "intermediate",
    completed: false,
    steps: [],
  },
]

const achievements = [
  {
    id: "1",
    title: "First Click",
    titleHi: "‡§™‡§π‡§≤‡§æ ‡§ï‡•ç‡§≤‡§ø‡§ï",
    titlePa: "‡®™‡®π‡®ø‡®≤‡®æ ‡®ï‡®≤‡®ø‡©±‡®ï",
    description: "Complete your first mouse lesson",
    descriptionHi: "‡§Ö‡§™‡§®‡§æ ‡§™‡§π‡§≤‡§æ ‡§Æ‡§æ‡§â‡§∏ ‡§™‡§æ‡§† ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç",
    descriptionPa: "‡®Ü‡®™‡®£‡®æ ‡®™‡®π‡®ø‡®≤‡®æ ‡®Æ‡®æ‡®ä‡®∏ ‡®™‡®æ‡®† ‡®™‡©Ç‡®∞‡®æ ‡®ï‡®∞‡©ã",
    icon: "üñ±Ô∏è",
    earned: true,
  },
  {
    id: "2",
    title: "Digital Explorer",
    titleHi: "‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ñ‡•ã‡§ú‡§ï‡§∞‡•ç‡§§‡§æ",
    titlePa: "‡®°‡®ø‡®ú‡©Ä‡®ü‡®≤ ‡®ñ‡©ã‡®ú‡©Ä",
    description: "Complete 3 digital literacy modules",
    descriptionHi: "3 ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§æ‡§ï‡•ç‡§∑‡§∞‡§§‡§æ ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç",
    descriptionPa: "3 ‡®°‡®ø‡®ú‡©Ä‡®ü‡®≤ ‡®∏‡®æ‡®ñ‡®∞‡®§‡®æ ‡®Æ‡®æ‡®°‡®ø‡®ä‡®≤ ‡®™‡©Ç‡®∞‡©á ‡®ï‡®∞‡©ã",
    icon: "üöÄ",
    earned: false,
  },
  {
    id: "3",
    title: "Safety Champion",
    titleHi: "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡•à‡§Ç‡§™‡§ø‡§Ø‡§®",
    titlePa: "‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ü ‡®ö‡©à‡®Ç‡®™‡©Ä‡®Ö‡®®",
    description: "Master internet safety practices",
    descriptionHi: "‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§æ‡§∞‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç",
    descriptionPa: "‡®á‡©∞‡®ü‡®∞‡®®‡©à‡©±‡®ü ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ü ‡®Ö‡®≠‡®ø‡®Ü‡®∏‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®Æ‡®æ‡®π‡®∞ ‡®¨‡®£‡©ã",
    icon: "üõ°Ô∏è",
    earned: false,
  },
]

export function DigitalLiteracyModules() {
  const [language, setLanguage] = useState<"en" | "hi" | "pa">("en")
  const [selectedLesson, setSelectedLesson] = useState<MicroLesson | null>(null)
  const [currentStep, setCurrentStep] = useState(0)
  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false)

  const getText = (en: string, hi: string, pa: string) => {
    switch (language) {
      case "hi":
        return hi
      case "pa":
        return pa
      default:
        return en
    }
  }

  const completedLessons = mockMicroLessons.filter((lesson) => lesson.completed).length
  const totalLessons = mockMicroLessons.length
  const overallProgress = (completedLessons / totalLessons) * 100

  const startLesson = (lesson: MicroLesson) => {
    setSelectedLesson(lesson)
    setCurrentStep(0)
    setIsLessonDialogOpen(true)
  }

  const nextStep = () => {
    if (selectedLesson && currentStep < selectedLesson.steps.length - 1) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-card/50 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-primary rounded-xl flex items-center justify-center">
                <Monitor className="w-6 h-6 text-primary-foreground" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-balance">
                  {getText("Digital Literacy", "‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§æ‡§ï‡•ç‡§∑‡§∞‡§§‡§æ", "‡®°‡®ø‡®ú‡©Ä‡®ü‡®≤ ‡®∏‡®æ‡®ñ‡®∞‡®§‡®æ")}
                </h1>
                <p className="text-sm text-muted-foreground">
                  {getText(
                    "Master essential digital skills step by step",
                    "‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•å‡§∂‡§≤ ‡§ï‡•ã ‡§ö‡§∞‡§£‡§¨‡§¶‡•ç‡§ß ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§∏‡•Ä‡§ñ‡•á‡§Ç",
                    "‡®ú‡®º‡®∞‡©Ç‡®∞‡©Ä ‡®°‡®ø‡®ú‡©Ä‡®ü‡®≤ ‡®π‡©Å‡®®‡®∞ ‡®ï‡®¶‡®Æ-‡®¶‡®∞-‡®ï‡®¶‡®Æ ‡®∏‡®ø‡©±‡®ñ‡©ã",
                  )}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              {/* Language Selector */}
              <div className="flex bg-muted rounded-lg p-1">
                {(["en", "hi", "pa"] as const).map((lang) => (
                  <Button
                    key={lang}
                    variant={language === lang ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setLanguage(lang)}
                    className="text-xs px-3"
                  >
                    {lang === "en" ? "EN" : lang === "hi" ? "‡§π‡§ø" : "‡®™‡®æ"}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-6 space-y-6">
        {/* Progress Overview */}
        <Card className="bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5 text-primary" />
              {getText("Your Digital Journey", "‡§Ü‡§™‡§ï‡•Ä ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ", "‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®°‡®ø‡®ú‡©Ä‡®ü‡®≤ ‡®Ø‡®æ‡®§‡®∞‡®æ")}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm text-muted-foreground">
                {getText("Modules Completed", "‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤", "‡®™‡©Ç‡®∞‡©á ‡®Æ‡®æ‡®°‡®ø‡®ä‡®≤")}
              </span>
              <span className="font-semibold">
                {completedLessons}/{totalLessons}
              </span>
            </div>
            <Progress value={overallProgress} className="h-3" />
            <div className="flex items-center justify-between text-sm">
              <span className="text-muted-foreground">
                {Math.round(overallProgress)}% {getText("Complete", "‡§™‡•Ç‡§∞‡•ç‡§£", "‡®™‡©Ç‡®∞‡®æ")}
              </span>
              <div className="flex items-center gap-1 text-accent">
                <Trophy className="w-4 h-4" />
                <span>
                  {achievements.filter((a) => a.earned).length} {getText("Achievements", "‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç", "‡®™‡©ç‡®∞‡®æ‡®™‡®§‡©Ä‡®Ü‡®Ç")}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Tabs defaultValue="modules" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="modules">{getText("Modules", "‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤", "‡®Æ‡®æ‡®°‡®ø‡®ä‡®≤")}</TabsTrigger>
            <TabsTrigger value="practice">{getText("Practice", "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏", "‡®Ö‡®≠‡®ø‡®Ü‡®∏")}</TabsTrigger>
            <TabsTrigger value="achievements">{getText("Achievements", "‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç", "‡®™‡©ç‡®∞‡®æ‡®™‡®§‡©Ä‡®Ü‡®Ç")}</TabsTrigger>
          </TabsList>

          {/* Modules Tab */}
          <TabsContent value="modules" className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {mockMicroLessons.map((lesson) => (
                <Card
                  key={lesson.id}
                  className={`cursor-pointer transition-all hover:shadow-lg hover:scale-105 ${
                    lesson.completed ? "bg-success/5 border-success/20" : "hover:border-primary/50"
                  }`}
                  onClick={() => startLesson(lesson)}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <div
                          className={`w-12 h-12 rounded-xl flex items-center justify-center ${
                            lesson.completed ? "bg-success text-success-foreground" : "bg-primary/10 text-primary"
                          }`}
                        >
                          {lesson.completed ? <CheckCircle className="w-6 h-6" /> : lesson.icon}
                        </div>
                        <div className="space-y-1">
                          <CardTitle className="text-base text-balance">
                            {getText(lesson.title, lesson.titleHi, lesson.titlePa)}
                          </CardTitle>
                          <Badge
                            variant={
                              lesson.difficulty === "beginner"
                                ? "secondary"
                                : lesson.difficulty === "intermediate"
                                  ? "default"
                                  : "destructive"
                            }
                            className="text-xs"
                          >
                            {lesson.difficulty === "beginner"
                              ? getText("Beginner", "‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä", "‡®∏‡®º‡©Å‡®∞‡©Ç‡®Ü‡®§‡©Ä")
                              : lesson.difficulty === "intermediate"
                                ? getText("Intermediate", "‡§Æ‡§ß‡•ç‡§Ø‡§Æ", "‡®Æ‡©±‡®ß‡®Æ")
                                : getText("Advanced", "‡§â‡§®‡•ç‡§®‡§§", "‡®â‡©±‡®®‡®§")}
                          </Badge>
                        </div>
                      </div>
                      {lesson.completed && lesson.score && (
                        <div className="text-center">
                          <div className="flex items-center gap-1">
                            <Star className="w-4 h-4 fill-warning text-warning" />
                            <span className="text-sm font-bold">{lesson.score}%</span>
                          </div>
                        </div>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <p className="text-sm text-muted-foreground mb-3 text-pretty">
                      {getText(lesson.description, lesson.descriptionHi, lesson.descriptionPa)}
                    </p>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-1 text-xs text-muted-foreground">
                        <Clock className="w-3 h-3" />
                        {lesson.duration} {getText("min", "‡§Æ‡§ø‡§®‡§ü", "‡®Æ‡®ø‡©∞‡®ü")}
                      </div>
                      <Button size="sm" variant={lesson.completed ? "secondary" : "default"} className="gap-1">
                        <Play className="w-3 h-3" />
                        {lesson.completed ? getText("Review", "‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ", "‡®∏‡®Æ‡©Ä‡®ñ‡®ø‡®Ü") : getText("Start", "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç", "‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡®∞‡©ã")}
                      </Button>
                    </div>
                    {lesson.completed && lesson.badge && (
                      <div className="mt-3 p-2 bg-accent/10 rounded-lg">
                        <div className="flex items-center gap-2">
                          <Award className="w-4 h-4 text-accent" />
                          <span className="text-xs font-medium text-accent">
                            {getText("Badge Earned:", "‡§¨‡•à‡§ú ‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§:", "‡®¨‡©à‡®ú ‡®™‡©ç‡®∞‡®æ‡®™‡®§:")} {lesson.badge}
                          </span>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Practice Tab */}
          <TabsContent value="practice" className="space-y-6">
            <div className="text-center space-y-4">
              <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto">
                <Target className="w-8 h-8 text-primary" />
              </div>
              <h2 className="text-2xl font-bold">{getText("Practice Zone", "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞", "‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®ñ‡©á‡®§‡®∞")}</h2>
              <p className="text-muted-foreground max-w-md mx-auto">
                {getText(
                  "Reinforce your learning with interactive practice exercises",
                  "‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•ã ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
                  "‡®á‡©∞‡®ü‡®∞‡®ê‡®ï‡®ü‡®ø‡®µ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®Ö‡®≠‡®ø‡®Ü‡®∏‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®Ü‡®™‡®£‡©Ä ‡®∏‡®ø‡©±‡®ñ‡®ø‡®Ü ‡®®‡©Ç‡©∞ ‡®Æ‡®ú‡®º‡®¨‡©Ç‡®§ ‡®ï‡®∞‡©ã",
                )}
              </p>
            </div>

            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {[
                {
                  title: "Mouse Accuracy",
                  titleHi: "‡§Æ‡§æ‡§â‡§∏ ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ",
                  titlePa: "‡®Æ‡®æ‡®ä‡®∏ ‡®∏‡®ü‡©Ä‡®ï‡®§‡®æ",
                  description: "Click targets to improve mouse precision",
                  descriptionHi: "‡§Æ‡§æ‡§â‡§∏ ‡§ï‡•Ä ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç",
                  descriptionPa: "‡®Æ‡®æ‡®ä‡®∏ ‡®¶‡©Ä ‡®∏‡®ü‡©Ä‡®ï‡®§‡®æ ‡®µ‡®ø‡©±‡®ö ‡®∏‡©Å‡®ß‡®æ‡®∞ ‡®≤‡®à ‡®ü‡®æ‡®∞‡®ó‡©á‡®ü‡®æ‡®Ç ‡®â‡©±‡®§‡©á ‡®ï‡®≤‡®ø‡©±‡®ï ‡®ï‡®∞‡©ã",
                  icon: <Mouse className="w-6 h-6" />,
                  color: "bg-blue-500",
                },
                {
                  title: "Typing Speed",
                  titleHi: "‡§ü‡§æ‡§á‡§™‡§ø‡§Ç‡§ó ‡§ó‡§§‡§ø",
                  titlePa: "‡®ü‡®æ‡®à‡®™‡®ø‡©∞‡®ó ‡®∏‡®™‡©Ä‡®°",
                  description: "Practice typing to increase your speed",
                  descriptionHi: "‡§Ö‡§™‡§®‡•Ä ‡§ó‡§§‡§ø ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡§æ‡§á‡§™‡§ø‡§Ç‡§ó ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
                  descriptionPa: "‡®Ü‡®™‡®£‡©Ä ‡®∏‡®™‡©Ä‡®° ‡®µ‡®ß‡®æ‡®â‡®£ ‡®≤‡®à ‡®ü‡®æ‡®à‡®™‡®ø‡©∞‡®ó ‡®¶‡®æ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®ï‡®∞‡©ã",
                  icon: <Keyboard className="w-6 h-6" />,
                  color: "bg-green-500",
                },
                {
                  title: "Web Navigation",
                  titleHi: "‡§µ‡•á‡§¨ ‡§®‡•á‡§µ‡•Ä‡§ó‡•á‡§∂‡§®",
                  titlePa: "‡®µ‡©à‡©±‡®¨ ‡®®‡©à‡®µ‡©Ä‡®ó‡©á‡®∏‡®º‡®®",
                  description: "Practice browsing websites safely",
                  descriptionHi: "‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
                  descriptionPa: "‡®µ‡©à‡©±‡®¨‡®∏‡®æ‡®à‡®ü‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ö‡®§ ‡®§‡®∞‡©Ä‡®ï‡©á ‡®®‡®æ‡®≤ ‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º ‡®ï‡®∞‡®® ‡®¶‡®æ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®ï‡®∞‡©ã",
                  icon: <Search className="w-6 h-6" />,
                  color: "bg-purple-500",
                },
              ].map((practice, index) => (
                <Card key={index} className="hover:shadow-md transition-shadow cursor-pointer">
                  <CardContent className="p-6">
                    <div className="flex items-center gap-4">
                      <div
                        className={`w-12 h-12 ${practice.color} rounded-xl flex items-center justify-center text-white`}
                      >
                        {practice.icon}
                      </div>
                      <div className="flex-1">
                        <h3 className="font-semibold text-balance">
                          {getText(practice.title, practice.titleHi, practice.titlePa)}
                        </h3>
                        <p className="text-sm text-muted-foreground text-pretty">
                          {getText(practice.description, practice.descriptionHi, practice.descriptionPa)}
                        </p>
                      </div>
                    </div>
                    <Button className="w-full mt-4 gap-2">
                      <Play className="w-4 h-4" />
                      {getText("Practice", "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏", "‡®Ö‡®≠‡®ø‡®Ü‡®∏")}
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Achievements Tab */}
          <TabsContent value="achievements" className="space-y-6">
            <div className="text-center space-y-4">
              <div className="w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto">
                <Trophy className="w-8 h-8 text-accent" />
              </div>
              <h2 className="text-2xl font-bold">{getText("Your Achievements", "‡§Ü‡§™‡§ï‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç", "‡®§‡©Å‡®π‡®æ‡®°‡©Ä‡®Ü‡®Ç ‡®™‡©ç‡®∞‡®æ‡®™‡®§‡©Ä‡®Ü‡®Ç")}</h2>
              <p className="text-muted-foreground max-w-md mx-auto">
                {getText(
                  "Celebrate your digital learning milestones",
                  "‡§Ö‡§™‡§®‡•Ä ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§ú‡§∂‡•ç‡§® ‡§Æ‡§®‡§æ‡§è‡§Ç",
                  "‡®Ü‡®™‡®£‡©Ä ‡®°‡®ø‡®ú‡©Ä‡®ü‡®≤ ‡®∏‡®ø‡©±‡®ñ‡®ø‡®Ü ‡®¶‡©Ä‡®Ü‡®Ç ‡®™‡©ç‡®∞‡®æ‡®™‡®§‡©Ä‡®Ü‡®Ç ‡®¶‡®æ ‡®ú‡®∏‡®º‡®® ‡®Æ‡®®‡®æ‡®ì",
                )}
              </p>
            </div>

            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {achievements.map((achievement) => (
                <Card
                  key={achievement.id}
                  className={`${
                    achievement.earned ? "bg-accent/5 border-accent/20 animate-pulse-glow" : "opacity-60 border-dashed"
                  }`}
                >
                  <CardContent className="p-6">
                    <div className="flex items-center gap-4">
                      <div className={`text-3xl ${achievement.earned ? "animate-bounce-gentle" : "grayscale"}`}>
                        {achievement.icon}
                      </div>
                      <div className="flex-1">
                        <h3 className="font-semibold text-balance">
                          {getText(achievement.title, achievement.titleHi, achievement.titlePa)}
                        </h3>
                        <p className="text-sm text-muted-foreground text-pretty">
                          {getText(achievement.description, achievement.descriptionHi, achievement.descriptionPa)}
                        </p>
                        {achievement.earned && (
                          <Badge variant="secondary" className="mt-2">
                            {getText("Earned", "‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§", "‡®™‡©ç‡®∞‡®æ‡®™‡®§")}
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>

        {/* Lesson Dialog */}
        <Dialog open={isLessonDialogOpen} onOpenChange={setIsLessonDialogOpen}>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                {selectedLesson?.icon}
                {selectedLesson && getText(selectedLesson.title, selectedLesson.titleHi, selectedLesson.titlePa)}
              </DialogTitle>
            </DialogHeader>
            {selectedLesson && selectedLesson.steps.length > 0 && (
              <div className="space-y-6">
                {/* Progress */}
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-muted-foreground">
                      {getText("Step", "‡§ö‡§∞‡§£", "‡®ï‡®¶‡®Æ")} {currentStep + 1} {getText("of", "‡§ï‡§æ", "‡®¶‡®æ")}{" "}
                      {selectedLesson.steps.length}
                    </span>
                    <span className="font-medium">
                      {Math.round(((currentStep + 1) / selectedLesson.steps.length) * 100)}%{" "}
                      {getText("Complete", "‡§™‡•Ç‡§∞‡•ç‡§£", "‡®™‡©Ç‡®∞‡®æ")}
                    </span>
                  </div>
                  <Progress value={((currentStep + 1) / selectedLesson.steps.length) * 100} />
                </div>

                {/* Current Step */}
                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-bold">
                      {currentStep + 1}
                    </div>
                    <h3 className="text-lg font-semibold">
                      {getText(
                        selectedLesson.steps[currentStep].title,
                        selectedLesson.steps[currentStep].titleHi,
                        selectedLesson.steps[currentStep].titlePa,
                      )}
                    </h3>
                    <Badge variant="outline">
                      {selectedLesson.steps[currentStep].type === "instruction"
                        ? getText("Learn", "‡§∏‡•Ä‡§ñ‡•á‡§Ç", "‡®∏‡®ø‡©±‡®ñ‡©ã")
                        : selectedLesson.steps[currentStep].type === "practice"
                          ? getText("Practice", "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏", "‡®Ö‡®≠‡®ø‡®Ü‡®∏")
                          : selectedLesson.steps[currentStep].type === "quiz"
                            ? getText("Quiz", "‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞‡•Ä", "‡®ï‡®µ‡®ø‡®ú‡®º")
                            : getText("Demo", "‡§°‡•á‡§Æ‡•ã", "‡®°‡©à‡®Æ‡©ã")}
                    </Badge>
                  </div>

                  <div className="bg-muted/50 rounded-lg p-6">
                    {selectedLesson.steps[currentStep].media && (
                      <div className="aspect-video bg-muted rounded-lg mb-4 flex items-center justify-center">
                        <ImageIcon className="w-12 h-12 text-muted-foreground" />
                      </div>
                    )}
                    <p className="text-pretty">
                      {getText(
                        selectedLesson.steps[currentStep].content,
                        selectedLesson.steps[currentStep].contentHi,
                        selectedLesson.steps[currentStep].contentPa,
                      )}
                    </p>
                    {selectedLesson.steps[currentStep].interactive && (
                      <div className="mt-4 p-4 bg-primary/5 border border-primary/20 rounded-lg">
                        <div className="flex items-center gap-2 text-primary">
                          <Lightbulb className="w-4 h-4" />
                          <span className="text-sm font-medium">
                            {getText("Interactive Practice", "‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏", "‡®á‡©∞‡®ü‡®∞‡®ê‡®ï‡®ü‡®ø‡®µ ‡®Ö‡®≠‡®ø‡®Ü‡®∏")}
                          </span>
                        </div>
                        <p className="text-sm text-muted-foreground mt-1">
                          {getText(
                            "Try the interactive exercise to practice this skill",
                            "‡§á‡§∏ ‡§ï‡•å‡§∂‡§≤ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Ç",
                            "‡®á‡®∏ ‡®π‡©Å‡®®‡®∞ ‡®¶‡®æ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®ï‡®∞‡®® ‡®≤‡®à ‡®á‡©∞‡®ü‡®∞‡®ê‡®ï‡®ü‡®ø‡®µ ‡®Ö‡®≠‡®ø‡®Ü‡®∏ ‡®¶‡©Ä ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞‡©ã",
                          )}
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Navigation */}
                <div className="flex items-center justify-between">
                  <Button
                    variant="outline"
                    onClick={prevStep}
                    disabled={currentStep === 0}
                    className="gap-2 bg-transparent"
                  >
                    <ArrowLeft className="w-4 h-4" />
                    {getText("Previous", "‡§™‡§ø‡§õ‡§≤‡§æ", "‡®™‡®ø‡®õ‡®≤‡®æ")}
                  </Button>
                  <div className="flex gap-2">
                    <Button variant="ghost" onClick={() => setIsLessonDialogOpen(false)} className="gap-2">
                      <RotateCcw className="w-4 h-4" />
                      {getText("Exit", "‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡•á‡§Ç", "‡®¨‡®æ‡®π‡®∞ ‡®®‡®ø‡®ï‡®≤‡©ã")}
                    </Button>
                    <Button
                      onClick={
                        currentStep === selectedLesson.steps.length - 1 ? () => setIsLessonDialogOpen(false) : nextStep
                      }
                      className="gap-2"
                    >
                      {currentStep === selectedLesson.steps.length - 1
                        ? getText("Complete", "‡§™‡•Ç‡§∞‡•ç‡§£", "‡®™‡©Ç‡®∞‡®æ")
                        : getText("Next", "‡§Ö‡§ó‡§≤‡§æ", "‡®Ö‡®ó‡®≤‡®æ")}
                      <ArrowRight className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </DialogContent>
        </Dialog>
      </main>
    </div>
  )
}
