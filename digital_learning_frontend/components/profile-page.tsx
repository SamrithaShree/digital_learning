

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { NavigationHeader } from "@/components/navigation-header"
import { User, Settings, Trophy, BookOpen, Globe, Save, Camera, Bell, Shield } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export function ProfilePage() {
  const [language, setLanguage] = useState("english")
  const [profile, setProfile] = useState({
    name: "‡§∞‡§æ‡§ú ‡§ï‡•Å‡§Æ‡§æ‡§∞",
    email: "raj.kumar@example.com",
    grade: "Class 8",
    school: "Government High School, Village Khanna",
  })
  const [isLoading, setIsLoading] = useState(false)
  const [notifications, setNotifications] = useState(true)
  const [offlineMode, setOfflineMode] = useState(true)
  const { toast } = useToast()

  const achievements = [
    { name: "First Lesson Complete", icon: "üéØ", earned: true, description: "Complete your first lesson" },
    { name: "Digital Explorer", icon: "üíª", earned: true, description: "Explore 5 different topics" },
    { name: "Quiz Master", icon: "üß†", earned: false, description: "Score 100% on 3 quizzes" },
    { name: "Offline Champion", icon: "üì±", earned: true, description: "Use offline mode for 7 days" },
    { name: "Streak Keeper", icon: "üî•", earned: false, description: "Maintain 30-day learning streak" },
    { name: "Helper", icon: "ü§ù", earned: false, description: "Help 5 classmates" },
  ]

  const stats = {
    lessonsCompleted: 12,
    totalLessons: 25,
    streakDays: 7,
    totalPoints: 850,
    weeklyGoal: 5,
    weeklyCompleted: 3,
  }

  const handleSaveProfile = async () => {
    setIsLoading(true)
    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 1000))

    toast({
      title: language === "hindi" ? "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à" : language === "punjabi" ? "‡®™‡©ç‡®∞‡©ã‡®´‡®æ‡®à‡®≤ ‡®∏‡©á‡®µ ‡®π‡©ã ‡®ó‡®à" : "Profile Saved",
      description:
        language === "hindi"
          ? "‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã ‡§ó‡§à"
          : language === "punjabi"
            ? "‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®∏‡®´‡®≤‡®§‡®æ‡®™‡©Ç‡®∞‡®µ‡®ï ‡®Ö‡®™‡®°‡©á‡®ü ‡®π‡©ã ‡®ó‡®à"
            : "Your information has been updated successfully",
    })
    setIsLoading(false)
  }

  const handleLanguageChange = (newLanguage: string) => {
    setLanguage(newLanguage)
    toast({
      title: language === "hindi" ? "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•Ä ‡§ó‡§à" : language === "punjabi" ? "‡®≠‡®æ‡®∏‡®º‡®æ ‡®¨‡®¶‡®≤‡©Ä ‡®ó‡®à" : "Language Changed",
      description: `${newLanguage === "hindi" ? "‡§π‡§ø‡§Ç‡§¶‡•Ä" : newLanguage === "punjabi" ? "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä" : "English"} selected`,
    })
  }

  const uploadProfilePicture = () => {
    toast({
      title: language === "hindi" ? "‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§°" : language === "punjabi" ? "‡®´‡©ã‡®ü‡©ã ‡®Ö‡®™‡®≤‡©ã‡®°" : "Photo Upload",
      description:
        language === "hindi"
          ? "‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§´‡•Ä‡§ö‡§∞ ‡§ú‡§≤‡•ç‡§¶ ‡§Ü‡§è‡§ó‡§æ"
          : language === "punjabi"
            ? "‡®´‡©ã‡®ü‡©ã ‡®Ö‡®™‡®≤‡©ã‡®° ‡®´‡©Ä‡®ö‡®∞ ‡®ú‡®≤‡®¶‡©Ä ‡®Ü‡®µ‡©á‡®ó‡®æ"
            : "Photo upload feature coming soon",
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-teal-50">
      <NavigationHeader
        title={language === "hindi" ? "‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤" : language === "punjabi" ? "‡®Æ‡©á‡®∞‡©Ä ‡®™‡©ç‡®∞‡©ã‡®´‡®æ‡®à‡®≤" : "My Profile"}
        backUrl="/get-started"
      />

      <div className="p-4">
        <div className="max-w-4xl mx-auto">
          <div className="mb-6">
            <p className="text-gray-600">
              {language === "hindi"
                ? "‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç"
                : language === "punjabi"
                  ? "‡®Ü‡®™‡®£‡©Ä ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®Ö‡®§‡©á ‡®§‡®∞‡©±‡®ï‡©Ä ‡®¶‡©á‡®ñ‡©ã"
                  : "View your information and progress"}
            </p>
          </div>

          <Tabs defaultValue="profile" className="space-y-6">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="profile" className="flex items-center gap-2">
                <User className="h-4 w-4" />
                {language === "hindi" ? "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤" : language === "punjabi" ? "‡®™‡©ç‡®∞‡©ã‡®´‡®æ‡®à‡®≤" : "Profile"}
              </TabsTrigger>
              <TabsTrigger value="progress" className="flex items-center gap-2">
                <BookOpen className="h-4 w-4" />
                {language === "hindi" ? "‡§™‡•ç‡§∞‡§ó‡§§‡§ø" : language === "punjabi" ? "‡®§‡®∞‡©±‡®ï‡©Ä" : "Progress"}
              </TabsTrigger>
              <TabsTrigger value="achievements" className="flex items-center gap-2">
                <Trophy className="h-4 w-4" />
                {language === "hindi" ? "‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç" : language === "punjabi" ? "‡®™‡©ç‡®∞‡®æ‡®™‡®§‡©Ä‡®Ü‡®Ç" : "Achievements"}
              </TabsTrigger>
              <TabsTrigger value="settings" className="flex items-center gap-2">
                <Settings className="h-4 w-4" />
                {language === "hindi" ? "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏" : language === "punjabi" ? "‡®∏‡©à‡®ü‡®ø‡©∞‡®ó‡®ú‡®º" : "Settings"}
              </TabsTrigger>
            </TabsList>

            <TabsContent value="profile">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-3">
                    <div className="relative">
                      <Avatar className="h-16 w-16">
                        <AvatarImage src="/student-avatar.png" />
                        <AvatarFallback className="text-xl">RK</AvatarFallback>
                      </Avatar>
                      <Button
                        size="sm"
                        variant="outline"
                        className="absolute -bottom-1 -right-1 h-8 w-8 rounded-full p-0 bg-transparent"
                        onClick={uploadProfilePicture}
                      >
                        <Camera className="h-3 w-3" />
                      </Button>
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold">{profile.name}</h2>
                      <p className="text-gray-600">
                        {profile.grade} ‚Ä¢ {profile.school}
                      </p>
                    </div>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="name">
                        {language === "hindi" ? "‡§®‡§æ‡§Æ" : language === "punjabi" ? "‡®®‡®æ‡®Æ" : "Name"}
                      </Label>
                      <Input
                        id="name"
                        value={profile.name}
                        onChange={(e) => setProfile({ ...profile, name: e.target.value })}
                      />
                    </div>
                    <div>
                      <Label htmlFor="email">
                        {language === "hindi" ? "‡§à‡§Æ‡•á‡§≤" : language === "punjabi" ? "‡®à‡®Æ‡©á‡®≤" : "Email"}
                      </Label>
                      <Input
                        id="email"
                        type="email"
                        value={profile.email}
                        onChange={(e) => setProfile({ ...profile, email: e.target.value })}
                      />
                    </div>
                    <div>
                      <Label htmlFor="grade">
                        {language === "hindi" ? "‡§ï‡§ï‡•ç‡§∑‡§æ" : language === "punjabi" ? "‡®ú‡®Æ‡®æ‡®§" : "Grade"}
                      </Label>
                      <Input
                        id="grade"
                        value={profile.grade}
                        onChange={(e) => setProfile({ ...profile, grade: e.target.value })}
                      />
                    </div>
                    <div>
                      <Label htmlFor="school">
                        {language === "hindi" ? "‡§∏‡•ç‡§ï‡•Ç‡§≤" : language === "punjabi" ? "‡®∏‡®ï‡©Ç‡®≤" : "School"}
                      </Label>
                      <Input
                        id="school"
                        value={profile.school}
                        onChange={(e) => setProfile({ ...profile, school: e.target.value })}
                      />
                    </div>
                  </div>
                  <Button
                    className="bg-orange-500 hover:bg-orange-600"
                    onClick={handleSaveProfile}
                    disabled={isLoading}
                  >
                    <Save className="h-4 w-4 mr-2" />
                    {isLoading
                      ? language === "hindi"
                        ? "‡§∏‡•á‡§µ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..."
                        : language === "punjabi"
                          ? "‡®∏‡©á‡®µ ‡®π‡©ã ‡®∞‡®ø‡®π‡®æ ‡®π‡©à..."
                          : "Saving..."
                      : language === "hindi"
                        ? "‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç"
                        : language === "punjabi"
                          ? "‡®∏‡©á‡®µ ‡®ï‡®∞‡©ã"
                          : "Save Changes"}
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="progress">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>
                      {language === "hindi"
                        ? "‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø"
                        : language === "punjabi"
                          ? "‡®∏‡®ø‡©±‡®ñ‡®£ ‡®¶‡©Ä ‡®§‡®∞‡©±‡®ï‡©Ä"
                          : "Learning Progress"}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <div className="flex justify-between mb-2">
                          <span>
                            {language === "hindi"
                              ? "‡§™‡•Ç‡§∞‡•á ‡§ï‡§ø‡§è ‡§ó‡§è ‡§™‡§æ‡§†"
                              : language === "punjabi"
                                ? "‡®™‡©Ç‡®∞‡©á ‡®ï‡©Ä‡®§‡©á ‡®™‡®æ‡®†"
                                : "Lessons Completed"}
                          </span>
                          <span>
                            {stats.lessonsCompleted}/{stats.totalLessons}
                          </span>
                        </div>
                        <Progress value={(stats.lessonsCompleted / stats.totalLessons) * 100} />
                      </div>

                      <div>
                        <div className="flex justify-between mb-2">
                          <span>
                            {language === "hindi"
                              ? "‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø"
                              : language === "punjabi"
                                ? "‡®π‡®´‡®§‡®æ‡®µ‡®æ‡®∞‡©Ä ‡®ü‡©Ä‡®ö‡®æ"
                                : "Weekly Goal"}
                          </span>
                          <span>
                            {stats.weeklyCompleted}/{stats.weeklyGoal}
                          </span>
                        </div>
                        <Progress value={(stats.weeklyCompleted / stats.weeklyGoal) * 100} />
                      </div>

                      <div className="grid grid-cols-2 gap-4 pt-4">
                        <div className="text-center">
                          <div className="text-2xl font-bold text-orange-500">{stats.streakDays}</div>
                          <div className="text-sm text-gray-600">
                            {language === "hindi"
                              ? "‡§¶‡§ø‡§® ‡§ï‡•Ä ‡§≤‡§ï‡•Ä‡§∞"
                              : language === "punjabi"
                                ? "‡®¶‡®ø‡®®‡®æ‡®Ç ‡®¶‡©Ä ‡®≤‡®ï‡©Ä‡®∞"
                                : "Day Streak"}
                          </div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-teal-500">{stats.totalPoints}</div>
                          <div className="text-sm text-gray-600">
                            {language === "hindi" ? "‡§ï‡•Å‡§≤ ‡§Ö‡§Ç‡§ï" : language === "punjabi" ? "‡®ï‡©Å‡©±‡®≤ ‡®Ö‡©∞‡®ï" : "Total Points"}
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>
                      {language === "hindi"
                        ? "‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø"
                        : language === "punjabi"
                          ? "‡®π‡®æ‡®≤ ‡®¶‡©Ä ‡®ó‡®§‡©Ä‡®µ‡®ø‡®ß‡©Ä"
                          : "Recent Activity"}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span className="text-sm">
                          {language === "hindi"
                            ? "‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§¨‡•á‡§∏‡§ø‡§ï‡•ç‡§∏ ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§ø‡§Ø‡§æ"
                            : language === "punjabi"
                              ? "‡®ï‡©∞‡®™‡®ø‡®ä‡®ü‡®∞ ‡®¨‡©á‡®∏‡®ø‡®ï‡®∏ ‡®™‡©Ç‡®∞‡®æ ‡®ï‡©Ä‡®§‡®æ"
                              : "Completed Computer Basics"}
                        </span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-sm">
                          {language === "hindi"
                            ? "‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§∏‡•á‡§´‡•ç‡§ü‡•Ä ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§™‡§æ‡§∏ ‡§ï‡§ø‡§Ø‡§æ"
                            : language === "punjabi"
                              ? "‡®á‡©∞‡®ü‡®∞‡®®‡©à‡®ü ‡®∏‡©á‡®´‡®ü‡©Ä ‡®ï‡®µ‡®ø‡®ú‡®º ‡®™‡®æ‡®∏ ‡®ï‡©Ä‡®§‡®æ"
                              : "Passed Internet Safety Quiz"}
                        </span>
                      </div>
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                        <span className="text-sm">
                          {language === "hindi"
                            ? "‡§®‡§Ø‡§æ ‡§¨‡•à‡§ú ‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ"
                            : language === "punjabi"
                              ? "‡®®‡®µ‡®æ ‡®¨‡©à‡®ú ‡®ï‡®Æ‡®æ‡®á‡®Ü"
                              : "Earned new badge"}
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value="achievements">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {achievements.map((achievement, index) => (
                  <Card
                    key={index}
                    className={achievement.earned ? "border-green-200 bg-green-50" : "border-gray-200 bg-gray-50"}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">{achievement.icon}</div>
                        <div className="flex-1">
                          <h3 className="font-semibold">{achievement.name}</h3>
                          <p className="text-sm text-gray-600 mb-2">{achievement.description}</p>
                          <Badge variant={achievement.earned ? "default" : "secondary"}>
                            {achievement.earned
                              ? language === "hindi"
                                ? "‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§"
                                : language === "punjabi"
                                  ? "‡®ï‡®Æ‡®æ‡®á‡®Ü"
                                  : "Earned"
                              : language === "hindi"
                                ? "‡§≤‡•â‡§ï‡•ç‡§°"
                                : language === "punjabi"
                                  ? "‡®≤‡®æ‡®ï‡®°"
                                  : "Locked"}
                          </Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="settings">
              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>
                      {language === "hindi"
                        ? "‡§≠‡§æ‡§∑‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏"
                        : language === "punjabi"
                          ? "‡®≠‡®æ‡®∏‡®º‡®æ ‡®∏‡©à‡®ü‡®ø‡©∞‡®ó‡®ú‡®º"
                          : "Language Settings"}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="language">
                        {language === "hindi" ? "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç" : language === "punjabi" ? "‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã" : "Choose Language"}
                      </Label>
                      <select
                        id="language"
                        value={language}
                        onChange={(e) => handleLanguageChange(e.target.value)}
                        className="w-full mt-1 p-2 border rounded-md"
                      >
                        <option value="english">English</option>
                        <option value="hindi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
                        <option value="punjabi">‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä</option>
                      </select>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>
                      {language === "hindi" ? "‡§ê‡§™ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏" : language === "punjabi" ? "‡®ê‡®™ ‡®∏‡©à‡®ü‡®ø‡©∞‡®ó‡®ú‡®º" : "App Settings"}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Bell className="h-4 w-4" />
                        <span>
                          {language === "hindi" ? "‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç" : language === "punjabi" ? "‡®∏‡©Ç‡®ö‡®®‡®æ‡®µ‡®æ‡®Ç" : "Notifications"}
                        </span>
                      </div>
                      <Button
                        variant={notifications ? "default" : "outline"}
                        size="sm"
                        onClick={() => setNotifications(!notifications)}
                      >
                        {notifications ? "ON" : "OFF"}
                      </Button>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Globe className="h-4 w-4" />
                        <span>
                          {language === "hindi" ? "‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§Æ‡•ã‡§°" : language === "punjabi" ? "‡®Ü‡®´‡®≤‡®æ‡®à‡®® ‡®Æ‡©ã‡®°" : "Offline Mode"}
                        </span>
                      </div>
                      <Button
                        variant={offlineMode ? "default" : "outline"}
                        size="sm"
                        onClick={() => setOfflineMode(!offlineMode)}
                      >
                        {offlineMode ? "ON" : "OFF"}
                      </Button>
                    </div>

                    <div className="flex items-center gap-2 pt-4 border-t">
                      <Shield className="h-4 w-4" />
                      <span className="text-sm text-gray-600">
                        {language === "hindi"
                          ? "‡§Ü‡§™‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à"
                          : language === "punjabi"
                            ? "‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®°‡©á‡®ü‡®æ ‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®§ ‡®π‡©à"
                            : "Your data is secure"}
                      </span>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}
